///! # Divisors
///!
///! It returns the count of divisors for a number between 1 - 1000
///!
///! ## Panics
///! 
///! + No panics implemented `TODO`

///! ## Calldata layout
///!
///!  `value`
///!
///! | name     | size (bytes) | offset |
///! | -------- | ------------ | ------ |
///! | value    | 32           | 0x00   |

#define macro MAIN() = takes(0) returns(0) {
  0x00 calldataload
  dup1
  0x01 eq 0x00 eq start jumpi
  0x02 0x00 mstore
  0x20 0x00 return

  start:
    START()
  
  
  0x00 mload // [i]
  dup1       // [i,i]
  mul        // [i**i]
  0x40 mload // [n]
  eq 0x00 eq y jumpi
  0x20 mload // [count]
  0x01 add   // [count+1]
  0x20 mstore // []

  y:
    0x20 0x20 return
}

#define macro START() = takes(0) returns(0) {
    0x02 0x00 mstore // [i]
    0x02 0x20 mstore // [count]
    0x40 mstore      // [n]

    // not optimized, `TODO` this loops 31 times
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
    LOOP()
}

#define macro LOOP() = takes(0) returns(0) {
  // WHILE()
  0x00 mload // [i]
  dup1       // [i,i]
  mul        // [i**2]
  0x40 mload // [n]
  dup2 dup2
  lt f jumpi // [pass]
  eq 0x00 eq proceed jumpi
  0x20 mload // [count]
  0x01 add   // [count+1]
  0x20 mstore // []
  0x20 0x20 return

  proceed:
    INCREMENT()
  
  f:
}

#define macro INCREMENT() = takes(0) returns(0) {
  // if n % i == 0
  0x00 mload // [i]
  0x40 mload // [n]
  LOOP 0x00 eq k jumpi

  0x01 q jumpi

  k:
    0x20 mload 0x02 add // [count+2]
    0x20 mstore   // []
  
  q:
    0x00 mload  // [i]
    0x01 add    // [i+1]
    0x00 mstore // []
}

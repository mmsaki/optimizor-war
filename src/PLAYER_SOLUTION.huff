#define macro MAIN() = takes(0) returns(0) {
  0x00 calldataload
  dup1
  0x01 eq 0x00 eq go jumpi
  0x00 0x00 mstore
  0x20 0x00 return

  go:
    0x02 0x00 mstore // [i]
    0x02 0x20 mstore // [count]
    0x40 mstore      // [n]

    WHILE()
  
  0x00 mload // [i]
  dup1       // [i,i]
  mul        // [i**i]
  0x40 mload // [n]
  eq 0x00 eq y jumpi
  0x20 mload // [count]
  0x01 add   // [count+1]
  0x20 mstore // []

  y:
    0x20 0x20 return
}

#define macro WHILE() = takes(0) returns(0) {
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
  MOD()
}


#define macro MOD() = takes(0) returns(0) {
  // WHILE()
  0x69
  0x00 mload // [i]
  dup1       // [i,i]
  mul        // [i**2]
  0x40 mload // [n]
  dup2 dup2
  lt f jumpi // [pass]
  eq 0x00 eq proceed jumpi
  0x20 mload // [count]
  0x01 add   // [count+1]
  0x20 mstore // []
  0x20 0x20 return


  proceed:
    INCRIMENT()
  
  f:
}

#define macro INCRIMENT() = takes(0) returns(0) {
  // if n % i == 0
  0x00 mload // [i]
  0x40 mload // [n]
  mod 0x00 eq k jumpi

  0x01 q jumpi

  k:
    0x20 mload 0x02 add // [count+2]
    0x20 mstore   // []
  
  q:
    0x00 mload  // [i]
    0x01 add    // [i+1]
    0x00 mstore // []
}

#define macro SQUARE() = takes(0) returns(0) {
  0x00 mload // [i]
  dup1       // [i,i]
  mul        // [i**2]
  0x40 mload // [n]
  eq 0x00 s jumpi // [pass]
  0x00 mload  // [i]
  0x01 add    // [i+1]
  0x00 mstore // []

  s:
}


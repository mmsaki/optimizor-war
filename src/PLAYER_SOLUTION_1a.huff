//! # Divisors
//!
//! It returns the count of divisors for a number between 1 - 1000

/// ## Calldata layout
///
///  `value`
///
/// | name     | size (bytes) | offset |
/// | -------- | ------------ | ------ |
/// | value    | 32           | 0x00   |

#define macro MAIN() = takes(0) returns(0) {
  0x00 calldataload
  dup1
  0x01 eq 0x00 eq start jumpi
  0x01 0x00 mstore
  0x20 0x00 return

  start:
    START()
  
  
  done:
    0x40 mload // [n]
    0x00 mload // [i]
    dup1       // [i,i]
    mul        // [i**i]
    eq iszero y jumpi
    0x20 mload // [count]
    0x01 add   // [count+1]
    0x20 mstore // []

  y:
    0x20 0x20 return
}

#define macro START() = takes(0) returns(0) {
    0x02 0x00 mstore // [i]
    0x02 0x20 mstore // [count]
    0x40 mstore      // [n]

    LOOP()

    
}

#define macro LOOP() = takes(0) returns(0) {
  while:
    0x40 mload // [n]
    0x00 mload // [i]
    dup1       // [i,i]
    mul        // [i**2]
    lt f jumpi // [pass]

  done jump
  
  f:
    DIVISIBLE()

  q:
    0x00 mload  // [i]
    0x01 add    // [i+1]
    0x00 mstore // []

  while jump
}

#define macro DIVISIBLE() = takes(0) returns(0) {
  // if n % i == 0
  0x00 mload // [i]
  0x40 mload // [n]
  mod iszero k jumpi

  q jump

  k:
    0x20 mload 0x02 add // [count+2]
    0x20 mstore   // []
}
